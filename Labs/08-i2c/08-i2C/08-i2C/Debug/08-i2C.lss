
08-i2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800120  00800120  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf4  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000659  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000526  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  000028f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002def  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_18>
  4c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3a       	cpi	r26, 0xA5	; 165
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 60 01 	call	0x2c0	; 0x2c0 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	a9 f0       	breq	.+42     	; 0x13e <__vector_13+0x66>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	f1 f0       	breq	.+60     	; 0x154 <__vector_13+0x7c>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f5       	brne	.+98     	; 0x17e <__vector_13+0xa6>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	98 0f       	add	r25, r24
 124:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
            if((addr > 8) && (addr < 119))
 128:	88 50       	subi	r24, 0x08	; 8
 12a:	8e 36       	cpi	r24, 0x6E	; 110
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_13+0x5c>
            {
                state = STATE_SEND;
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
            }
            if (addr > 120)
 134:	99 37       	cpi	r25, 0x79	; 121
 136:	30 f1       	brcs	.+76     	; 0x184 <__vector_13+0xac>
            {
                addr = 0;
 138:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 13c:	23 c0       	rjmp	.+70     	; 0x184 <__vector_13+0xac>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	88 0f       	add	r24, r24
 144:	0e 94 e6 00 	call	0x1cc	; 0x1cc <twi_start>
        twi_stop();
 148:	0e 94 04 01 	call	0x208	; 0x208 <twi_stop>
        {
            state = STATE_ACK;
        }
        else
        {
            state = STATE_IDLE;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 152:	18 c0       	rjmp	.+48     	; 0x184 <__vector_13+0xac>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	4a e0       	ldi	r20, 0x0A	; 10
 15a:	be 01       	movw	r22, r28
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 9d 01 	call	0x33a	; 0x33a <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr, uart_string, 10);
        uart_puts(uart_string);
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>
        uart_puts("\r\n");
 16e:	8d e1       	ldi	r24, 0x1D	; 29
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>
        state = STATE_IDLE;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>

        break;
 17c:	03 c0       	rjmp	.+6      	; 0x184 <__vector_13+0xac>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        
        
        break;
    }
}
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1ae:	87 b1       	in	r24, 0x07	; 7
 1b0:	8f 7c       	andi	r24, 0xCF	; 207
 1b2:	87 b9       	out	0x07, r24	; 7
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	80 63       	ori	r24, 0x30	; 48
 1b8:	88 b9       	out	0x08, r24	; 8
 1ba:	e9 eb       	ldi	r30, 0xB9	; 185
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8c 7f       	andi	r24, 0xFC	; 252
 1c2:	80 83       	st	Z, r24
 1c4:	88 e9       	ldi	r24, 0x98	; 152
 1c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1ca:	08 95       	ret

000001cc <twi_start>:
 1cc:	94 ea       	ldi	r25, 0xA4	; 164
 1ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	90 81       	ld	r25, Z
 1d8:	99 23       	and	r25, r25
 1da:	ec f7       	brge	.-6      	; 0x1d6 <twi_start+0xa>
 1dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1e0:	84 e8       	ldi	r24, 0x84	; 132
 1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	ec f7       	brge	.-6      	; 0x1ea <twi_start+0x1e>
 1f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1f4:	98 7f       	andi	r25, 0xF8	; 248
 1f6:	98 31       	cpi	r25, 0x18	; 24
 1f8:	29 f0       	breq	.+10     	; 0x204 <twi_start+0x38>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 34       	cpi	r25, 0x40	; 64
 1fe:	19 f4       	brne	.+6      	; 0x206 <twi_start+0x3a>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret

00000208 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 208:	84 e9       	ldi	r24, 0x94	; 148
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 20e:	08 95       	ret

00000210 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 228:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 22c:	8c 71       	andi	r24, 0x1C	; 28
 22e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 232:	ef 5f       	subi	r30, 0xFF	; 255
 234:	ef 73       	andi	r30, 0x3F	; 63
 236:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 23a:	e9 17       	cp	r30, r25
 23c:	39 f0       	breq	.+14     	; 0x24c <__vector_18+0x3c>
 23e:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	eb 5d       	subi	r30, 0xDB	; 219
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	20 83       	st	Z, r18
 24a:	01 c0       	rjmp	.+2      	; 0x24e <__vector_18+0x3e>
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 252:	89 2b       	or	r24, r25
 254:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_19>:
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
 27e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 282:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 286:	98 17       	cp	r25, r24
 288:	69 f0       	breq	.+26     	; 0x2a4 <__vector_19+0x38>
 28a:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 28e:	ef 5f       	subi	r30, 0xFF	; 255
 290:	ef 73       	andi	r30, 0x3F	; 63
 292:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	eb 59       	subi	r30, 0x9B	; 155
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 81       	ld	r24, Z
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <__vector_19+0x42>
 2a4:	e1 ec       	ldi	r30, 0xC1	; 193
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8f 7d       	andi	r24, 0xDF	; 223
 2ac:	80 83       	st	Z, r24
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <uart_init>:
 2c0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 2c4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 2c8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 2cc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 2d0:	99 23       	and	r25, r25
 2d2:	1c f4       	brge	.+6      	; 0x2da <uart_init+0x1a>
 2d4:	22 e0       	ldi	r18, 0x02	; 2
 2d6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2da:	90 78       	andi	r25, 0x80	; 128
 2dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 2e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 2e4:	88 e9       	ldi	r24, 0x98	; 152
 2e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 2f0:	08 95       	ret

000002f2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2f2:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 2f6:	2f 5f       	subi	r18, 0xFF	; 255
 2f8:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 2fa:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 2fe:	29 17       	cp	r18, r25
 300:	e1 f3       	breq	.-8      	; 0x2fa <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 302:	e2 2f       	mov	r30, r18
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	eb 59       	subi	r30, 0x9B	; 155
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 30c:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 310:	e1 ec       	ldi	r30, 0xC1	; 193
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	80 62       	ori	r24, 0x20	; 32
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
    while (*s)
 322:	88 81       	ld	r24, Y
 324:	88 23       	and	r24, r24
 326:	31 f0       	breq	.+12     	; 0x334 <uart_puts+0x18>
 328:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 32a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 32e:	89 91       	ld	r24, Y+
 330:	81 11       	cpse	r24, r1
 332:	fb cf       	rjmp	.-10     	; 0x32a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <__itoa_ncheck>:
 33a:	bb 27       	eor	r27, r27
 33c:	4a 30       	cpi	r20, 0x0A	; 10
 33e:	31 f4       	brne	.+12     	; 0x34c <__itoa_ncheck+0x12>
 340:	99 23       	and	r25, r25
 342:	22 f4       	brpl	.+8      	; 0x34c <__itoa_ncheck+0x12>
 344:	bd e2       	ldi	r27, 0x2D	; 45
 346:	90 95       	com	r25
 348:	81 95       	neg	r24
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__utoa_common>

00000350 <__utoa_ncheck>:
 350:	bb 27       	eor	r27, r27

00000352 <__utoa_common>:
 352:	fb 01       	movw	r30, r22
 354:	55 27       	eor	r21, r21
 356:	aa 27       	eor	r26, r26
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	aa 1f       	adc	r26, r26
 35e:	a4 17       	cp	r26, r20
 360:	10 f0       	brcs	.+4      	; 0x366 <__utoa_common+0x14>
 362:	a4 1b       	sub	r26, r20
 364:	83 95       	inc	r24
 366:	50 51       	subi	r21, 0x10	; 16
 368:	b9 f7       	brne	.-18     	; 0x358 <__utoa_common+0x6>
 36a:	a0 5d       	subi	r26, 0xD0	; 208
 36c:	aa 33       	cpi	r26, 0x3A	; 58
 36e:	08 f0       	brcs	.+2      	; 0x372 <__utoa_common+0x20>
 370:	a9 5d       	subi	r26, 0xD9	; 217
 372:	a1 93       	st	Z+, r26
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	79 f7       	brne	.-34     	; 0x356 <__utoa_common+0x4>
 378:	b1 11       	cpse	r27, r1
 37a:	b1 93       	st	Z+, r27
 37c:	11 92       	st	Z+, r1
 37e:	cb 01       	movw	r24, r22
 380:	0c 94 c2 01 	jmp	0x384	; 0x384 <strrev>

00000384 <strrev>:
 384:	dc 01       	movw	r26, r24
 386:	fc 01       	movw	r30, r24
 388:	67 2f       	mov	r22, r23
 38a:	71 91       	ld	r23, Z+
 38c:	77 23       	and	r23, r23
 38e:	e1 f7       	brne	.-8      	; 0x388 <strrev+0x4>
 390:	32 97       	sbiw	r30, 0x02	; 2
 392:	04 c0       	rjmp	.+8      	; 0x39c <strrev+0x18>
 394:	7c 91       	ld	r23, X
 396:	6d 93       	st	X+, r22
 398:	70 83       	st	Z, r23
 39a:	62 91       	ld	r22, -Z
 39c:	ae 17       	cp	r26, r30
 39e:	bf 07       	cpc	r27, r31
 3a0:	c8 f3       	brcs	.-14     	; 0x394 <strrev+0x10>
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
